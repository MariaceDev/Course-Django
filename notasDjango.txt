
NUEVO PROYECTO
django-admin startproject holamundo

Crea un archivo manage.py y una carpeta holamundo, que una aplicación que se gestiona como un paquete.
El directorio raíz que se crea como defecto tiene el mismo nombre que el proyecto.

manage.py nos permite gestionar el proyecto, no hay qie tocar, se encarga de poner a nuestgra disposición las instrucciones de consola para poder operar.

En la carpeta está toda la estructura de archivos: todas las aplicaciones (carpetas) tienen:
- un _init_.py, para poder gestionar cada aplicaicón com unnpaquete
- asgi.py y wsgi son archivos auxiliares, que nos van a servir para ayudarnos por ejemplo, con el servidor y otras acciones ausiliares.
- urls.py: asocia las urls con las vistas que los gestionan. Es un array con los path. Aquí escribiremos todas las rutas y las vistas, también  los templates.
- settings.py: para establecer las configuraciones del paquete. Por ejemplo: hay un array con las apps instaladas, gracias a que es un framework vienen ya instaladas

1.5 PRIMER HOLA MUNDO: CIRCUITO COMPLETO

- Creamos una archivo de vistas para controlar la ruta y devolver un mensaje http para poder comprobar el circuito completo de esta arquitectura.
- Entramos en la terminal y creamos la estructura de base de 11:32 03/07/2023datos:para ello migra los modelos de datos a nuestro sistema de permanencia de datos a través del comando "migrator". Lo tendremos que hcer cada vez que modifiquemos la estructura de datos, al inicio y cada vez que trabajemos con él.
- Primero debemos llamar al archivo manage.py para hacer cualquier acción en la terminal y luego le solicitamos el comando ejecutar
- Entonces ejecutamos el comando: python manage.py migrate (tienes que colocarte en la ruta correcta)
- Para ver la db en vs instalamos sql tools y sql viewer
- Para continuar, podemos usar el servidor de django llamando desde el terminal: python manage.py runserver
- Entonces nos levanta un servidor en el puerto 8000, si seguimos el link veremos la página de django
- Para interrumpir el servidor usamos "cntrl c".
- Necesitamos un archivo de vistas, recordamos: las url apuntan a las vistas y estas trabajan con los modelos y estos devuelven los template.
- Entonces creamos un views.py que es donde vamos a declarar las vistas con las que estamos trabajando.
- Las vistas contienen la lógica y solo son diferentes funciones a las que se asociaran las url.
- Creamos la primera vista: 
#las vistas siempre van a tener un parámetro que es el request, la petición de ejecutar esta vista
#En este ejemplo nos saltamos los modelos y las plantillas con las que trabajaremos más adelente

from django.http import HttpResponse

def saludo(request):
    return HttpResponse("Hola mundo")

# Ya tenemos la vista creada, ahora necesitamos asociar una ruta que ejecute la vista. 
# Para ello nos vamos el urls.py y la definimos: path('saludo/', views.saludo, name='saludo') #es muy imprtante terminar con "/"
 Además, tenemos que importar la views: from . import views

- Levantamos de nuevo el servidor y seguimos el link. Aparece de inicio un error y es normal, porque no tenemos ninguna ruta en la raiz del proyecto.
- Las que exiten son admin y saludo. entonces ejecutamos la ruta saludo en la barra del navegador añadiendo: /saludo
- YA TENEMOS NUESTRO PRIMER CIRCUITO

2.1 RUTAS CON PARÁMETROS

Esto nos permitirá recepcionar variables a través de la url que puede posteriormente utilizar en nuestra vista.

- Hasta ahora solo hemos definido rutas estáticas, no reciben ninguan información a través de la url.
- si hacemos un blog, por ejemplo, y queremos recibir el id de la noticia: path("post/3") o una función para pedir la edad path("adulto/edad")
path('adulto/<int:edad>/<int:altura>/'): asi se introducen las variables. después lo asociamos a na vista:  path('adulto/<int:edad>/<int:altura>/' views.adulto, name='adulto')

- Hacemos una prueba:

path('adulto/<int:edad>/', views.adulto, name='adulto')

def adulto (request, edad):
    if(edad >= 18):
        return HttpResponse ("Es mayor de edad.")
    else:
        return HttpResponse ("No eres mayor de edad.")



http://127.0.0.1:8000/adulto/14/
No eres mayor de edad.


2.2 USO DE PLANTILLAS

Qué son las plantillas y configuramos nuestro primer template.

Creamos un nuevo proyecto: django-admin startproject plantillas

1º.- Migramos toda la estructura: python manage.py migrate.
2º.- Levantamos servidor: python manage.py runserver.
3º.- Creamos un views.py 
4ª.- Creamos un path: path('simple', views.simple, name='simple') e importamos el views.py
5º.- Creamos una vista nueva, pero en vez de devolver un http, ddevolvemos un template que muestre la información al usuario

Los template o plantillas es un trozo de texto que aislamos dentro de un archivo, que, de forma habitual será HTML. 
Las plantillas contienen la parte visual de proyecto, la lógica estará en las views.
Carga de un template:
1- Establecer el directorio donde vamos a colocar las plantillas, que será en: settings.py
Ahí hay un array de direcciones para buscar donde se encuentran la plantillas:  'DIRS': ['templates']
2- Creamos en la raíz una carpeta con el mismo nombre.
3- Cremos un archivo para views que se va a llamar simple.html, donde podemos escribir nuestro código html
4- Volvemos al archivo views para terminar el return, que debe devolver la plantilla. Hay diferentes métodos, como haciendo la carga de un archivo.
Pero django nos facilita con atajos a través del método render: from django.shortcuts import render
Después terminamos la vista usando render al que le pasamos tres parámetros: el request o petición, la ruta hacia el html y el contexto, que es un diccionario, se lo pasamos vacío porque esta plantilla no necesita nada para funcionar):

def simple(request):
    return render(request, 'simple.html', {})

2.3. USO DE CONTEXTOS

1.- Hacemos un nuevo path al que llamamos dinámico.
2.- Definimos la vista en views con una función. Para ello hacemos uso de una variable pasada por paramertro. Para en el path solicitamos un string llamado nombre:
 
	path('dinamico/<str:name>/', views.dinamico, name='dinamico')

3.- Creamos un nuevo archivo HTML llamado dinamico, utilizando la plantilla que hemos creado.
4.- Para la vista, utilizamos un return con render al que le pasamos los tres parámetros definidos en el apartado anterior, con la diferencia de que, en vez de pasar un diccionario vacío, le pasamos una variable llamada contexto que contendrá el diccionario.

	def dinamico (request, name):
    	  context = {'name': name}
    	  return render(request, 'dinamico.html', context)

5.- En el contexto lo que hacemos es el uso de un par clave:valor, lo que hacemos es uso de la clave para que pinte el valor. Para ello, en HTML lo que hacemos es una doble llave para colocar el name. Así, colocamos el valor del contexto, hacienod uso de la información contextual:
	
	    <h1>Hola {{name}}</h1>

6.- Podemos pasar todo tipo de datos, incluso objetos y clases con sus métodos. No solo tipo de datos primitivos.
7.- Porbamos a pasar un array:

	def dinamico (request, name):
    	  categories = ['code', 'design', 'marketing']
    	  context = {'name': name, 'categories': categories}
    	  return render(request, 'dinamico.html', context)
         ____________________________________________________

  	<body>
          <h1>Hola {{name}}</h1>
          <h3>Categorías</h3>
          <p>{{categories}}</p>   
    	</body>

Resultado:

Hola Mari Carmen
Categorías
['code', 'design', 'marketing']

Como podemos ver, nos pinta la estructura, pero lo que queremos es simplemente acceder a la imformación de la estructura, para ello tendremos que recorrer la estructura para pintar la info sin corchetes, de forma correcta.


2.4. BUCLES Y CONDICIONALES EN PLANTILLAS

Es importante que no cargemos acciones de lógica en las plantillas (HTML), igualmente no debemos pintar (visualización) en las vistas.

Para recorrer las estructuras, BUCLES, debemos usar una nomenclatura diferente {% %}. La estructura quedaría de la siguiente manera:

   <body>
        <h1>Hola {{name}}</h1>
        <h3>Categorías</h3>
        <ul>
            {% for category in categories %} <!--Hacemos un foreach para recorrer el array-->
                <li>{{category}}</li> <!--Escribimos código con la imformación que usamos, es un literal-->
            {% endfor%} <!--Cerramos el foreach-->
        </ul>  
    </body>

Y el resultado:

Hola Mari Carmen
Categorías
   · code
   · design
   · marketing

También, podemos incorporar CONDICIONALES:

   <body>
        <h1>Hola {{name}}</h1>
        <h3>Categorías</h3>
        <ul>
            {% for category in categories %} <!--Hacemos un foreach para recorrer el array-->
                {% if category == 'code' %} <!--Incorporamos el if con la condición-->
                    <li><b>{{category}}</b></li> <!--Le indicamos que lo pinte en negrita-->
                {% else %} <!--Si no se cumple la condición: -->
                    <li>{{category}}</li> <!--Escribimos código con la imformación que usamos, es un literal-->
                    {% endif %} <!--Cerramos el if-->
            {% endfor %} <!--Cerramos el foreach-->
        </ul>  
    </body>


2.5. COMENTARIOS Y FILTROS

En las plantillas podemos escribir COMENTARIOS que no van a ser pintados en la consola: <!---->, aparece en la consola de Google cuando inspeccionamos el código.

Hay dos formas:

-Comentario simple: {# #}
- Comentario multilinea: {% coment %}
                          Hola, soy comentario multilínea
                         {% endcoment %}



Django ofrece una gran cantidad de filtros para realizar especificaciones. Por ejemplo, finaliza el bucle y queremos colocar un h5 con el total de categorías, aunque no tengamos el length, podemos usar un filtro:
	
	<h5>Total de categorías: {{categories|length}}</h5>

Y el resultado sería:

Hola Mari Carmen
Categorías
   · code
   · design
   · marketing

Total de categorías: 3

Otro ejemplo, que lo coloque en mayúsculas:

	<li><b>{{category | upper}}</b></li>

También se pueden anidar

	<li><b>{{category | upper | lower | capitalize | title }}</b></li>


2.6. ARCHIVOS ESTÁTICOS

1.- Creamos un nuevo proyecto: django-admin startproject estaticos
2.- Migramos el sistema: python manage.py migrate
3.- Corremos el servidor: python manage.py runserver
4.- Generamos un circuito para caragr una plantilla:

	1. setting.py e indicamos el directorio 'templates'
	2. Creamos el directorio 'templates'
	3. Accedemos al archivo de rutas y cargamos una vista
		1. Para ello generamos el archivo de vistas: views.py
		2. Creamos una vista llamada estaticos que, por ahora, dejamos vacía:
			def estaticos(request):
    				return ""
	4. Colocamos en la urls la importación de dicho archivo:
		from . import views
		path('estaticos/', views.estaticos, name='estaticos')
	5. El archivo views.py importamos el método render para poder pintar las vistas:
		from django.shortcuts import render
		def estaticos(request):
    			return render (request, 'estaticos.html', {})
	6. Creamos la plantilla: estaticos.html


 ¿Cómo hacemos la importación de archivos estáticos en una plantilla?

1. Vamos al archivo setting.py y en STATIC_URL = 'static/' es la ubicación donde pondremos los archivos estáticos.
Por defecto se coloca en la raíz del proyecto. Nosotros lo haremos así:
	- Accedemos a nuestro proyecto y creamos un directorio donde irán todos los archivos js, css, imágenes, etc., que usaremos en el proyecto.

2. Creamos el archivo estático dentro de la carpeta, como por ejemplo un css: style.css
3. Indicamos a la plantilla, antes que el doctype, que va a hacer uso de elementos estáticos: 
		{% load static %}
4. Para cargar el css en el HTML no se hace de la manera normal, sino utilizando la nomenclatura de django que va a especificar dentro de l aplantilla qué archivos van a ser de carga estática:
	  <link rel="stylesheet" type="text/css" href="{% static 'style.css' %}" >
5. Comprobamos el navegador y no se ha caragdo correctamente debido a la configuración, porque tenemos que indicar los directorios que va a tener la configuración sobre los archivos estáticos.
Esto se hace añadiendo una variable de entorno más en el setting. La variable es:
	STATICFILES_DIRS = [#recibe un array con las url que vamos a tener
	BASE_DIR / 'static', #añadimos el directorio base junto con static, que es lo que hemos definido anteriormente
	'/var/www/static', #añadimos este directorio, que será el que albergará los archivos estáticos una vez hagamos el deploy, aunque todavía no esté creada
	]

2.7. HERENCIA DE PLANTILLAS

Nos va apermitir modularizar nuestro HTML y evitar la reutilización de código, para no concurrir en duplicidad de etiquetas o módulos.
Creamos un nuevo proyecto con la views, la carpeta template, static y todo el recorrido para cargar una plantilla y el contenido estático que necesite.

Añadimos una nueva ruta, porque nuestro proyecto puede necesitar varias rutas:
	path('ejemplo/', views.ejemplo, name='ejemplo'),
Y le creamos una vista:
	def ejemplo (request):
    return render (request, 'ejemplo.html', {})
Y otra ruta más para que se entienda bien, con su vista y su template, a la que llamaremos 'otra'.

Para rellenar los template ejemplo u otra, estamos copiando contenido y rellenando. Esto no es una buena práctica, es un problema.
Para evitarlo, tenemos las herencias. Indicamos que una plantilla va a heredar de una plantilla padre que le puede heredar una estructura.
 así estandarizamos el contenido del layout.

Para hacerlo, creamos un nuevo directorio, dentro de template, que se llama de diferentes maneras ( app, base o layout) y dentro creamos una plantilla: base.html.
Rellenamos la platilla con las etiquetas básicas y le añadimos un archivo css.

Ahora el siguiente paso es extender el contenido de la base a las otras plantillas. Para ello especificaremos qué partes pueden ser extendidas, es decir, las que van a cambiar por medio de bloques:
	{% block styles %}{% endblock %} -Para incluir más hojas de estilo
	{% block title %}{% endblock %} -Para cambiar el título
	{% block content %}{% endblock %} -PAra cambiar contenido
	{% block scripts %}{% endblock %} - Para incluir diferentes scripts

El siguiente paso será cómo pueden el resto de plantillas extender la información de la base:
	{% extends './layout/base.html' %}
Ahora, por defecto, tendrán todo el contenido de la base, que se mostrará en herencia.

Y para extender el contenido que queremos cambiar bastaría con definirlo:
	{% block title %}HERENCIA{% endblock %}

	{% block content %}
   	 <h1> HERENCIA</h1>
	{% endblock %}

2.8. ENLACE E INCLUSIÓN

Primero creamos un path para incluir el directorio raíz ddel proyectos:
	 path('index/', views.index, name='index')
Y definimos la vista:
	def index (request):
    		return render (request, 'index.html', {}) 
Creamos el archivo index.html dentro de la carpeta template y extendemos la plantilla base.

Empezamos con los links, haciendo las vinculaciones a través de los links y no escribiéndolo sobre la barra de direcciones.
Para ello, vamos al base.html y definimos ahí los enlaces. 
Para hacer los enlaces utilizamos los nombres definidos en el path, también la ruta del path, aunque es un codigo más difícil de mantener si hubiera que modificarlo.
El nombre es mucho más fácil de modificar porque solo habría que cambiarlo una vez:

	 <li><a href="{% url 'herencia' %}">Herencia</a></li>

Para modularizar mucho más el código podemos hacer uso de los includes. Dentro de layouts hacemos una nueva carpeta llamada 'parcials' y dentro creamos una plantilla que sea un menú html.

Cortamos el nav del archivo de la base y lo pegamos en el menu.html.
Ahora o que queremos es que la base extienda el menú con el include:

	  {% include 'layouts/partials/menu.html' %}

2.9. DOCUMENTACIÓN OFICIAL

2.10. PRÁCTICA DE PLANTILLAS

________________________________________________________________________________________________________________
________________________________________________________________________________________________________________


3.1. MODULARIZACIÓN

Creamos la primera aplicación dentro de un proyecto ya creado en Django:

1. django-admin startproject modularizacion
2. creamos una nueva aplicación: 
	python manage.py startapp comentarios #el último es el nombre que hemos elegido para la app
3. la app funciona como otra aplicación y contiene otros archivos como el views, otro para test, para modularición, todos los iremos trabajando
4. contiene un directorio de migraciones.
5. Si queremos reutilizar la app de comentarios en nuestro proyecto práctica plantillas, tan solo tenemos que llevarnos el directorio al proyecto.
6. Tenemos que decirle a django cuáles de las aplicaciones que tenemos van a estar instaladas en el proyecto, es decir, cuáles son las que vamos a utilizar.
Esto lo hacemos en el archivo:
		 settings.py => INSTALLED_APPS => 'comentarios',
Como habita en la raíz del proyecto es suficiente con poner el nombre de la app. Como comentarios funciona como un paquete, se instala.

Para comprobar si la app está correctamente instalada ejecutamos en consola:
	python manage.py check comentarios
Respuesta: System check identified no issues (0 silenced).
Significa que ha detectado la app y no hay fallos en ella.

RESUMEN RECORRIDO ARQUITECTURA

1. El USUARIO realiza una petición a una URL que nosotros gestionamos con el archivo urls.py
2. Este urls.py deriba a una VIEWS.py que contendrá la lógica a través de funciones def.
3. El views.py puede que necesite realizar acciones con los datos del proyecto, esto lo hace a través de los MODELOS.
4. Los modelos a través del ORM harán las gestiones con el motor de base de datos para garantizar la persistencia.
5. Devuelve las informaciones a la VISTA, que renderiza, pinta un TEMPLATE, que es la información que recibe el usuario, la WEB servida en su navegador

Este patrón de arquitectura MODEL TEMPLATE VIEW (MTV) es una variación del (MVC). Las principales diferencias son:

	- En el patrón MVC, la Vista se encarga de la presentación de los datos al usuario, mientras que en el patrón MTV, 
	  la Plantilla se encarga de esta responsabilidad.
	- En el patrón MVC, el Controlador es responsable de recibir las acciones del usuario y actualizar el Modelo y la Vista en consecuencia. 
	- En el patrón MTV, la Vista se encarga de la lógica de negocio y la interacción entre el Modelo y la Plantilla.

3.2. MODELADO DE DATOS

Los modelos van a ser elementos que van a estar representando datos que el ORM se va a encargar de gestionar dentro de nuestro sistema de bases de datos.
El ORM de Django nos va a abstraer del ORM, por ejemplo consultas sql, etc. Podremos trabajar cada uno de los elementos como si fuese un objeto: en lugar de crear
tablas, crearemos clases en python. Estas clases extenderán un modelo y van a perminirnos crear objetos. El ORM de Django lo que hará por detrás es generar una tabla
en nuestro sistema de permanencia de datos por cada clase que creemos. Nosotros solo creamos clases y django una tabla, donce cada atributo corresponderá una tabla.


Comenzmos por el ejemplo más sencillo: un comentarios.

Trabjanmos con MODELS: cada modelo es una clase y empezamos por una:

	class Comment (models.Model): #Por convención, los nombres de las clases empiezan en mayúscula y van en singular

   		 def __str__(self):
      		  return

Cuando migremos esto, django detectará la clase comments y creará una tabla en la DB.
Ejemplo:

	class Comment (models.Model):

    		name = models.CharField(max_length=255, null=False)
    		score = models.IntegerField(default=3)
    		comment = models.TextField(max_length=1000, null=True)

    		def __str__(self):
        		return self.name

Como hemos hecho una modificación del modelo, debemos hacer una migración. En Django se hace de la siguiente manera:

1. Pedimos que la clase sea traducida a sql:
	python manage.py makemigrations
Entonces nos crea este archivo:  comentarios\migrations\0001_initial.py

2. Ejecutamos la migración con: python manage.py migrate
Si vemos la DB, aparece la estructura habitual más una tabla llamada comentarios_comments (nombre_app.nombre_clase)
Si pulsamos vemos la tabla con los campos que hemos definido, junto con un id que es automático si no se define.
Podemos modificar el modelo sin problema, solo que hay que hacer la migraci´`on para que se guarden los cambios:
	python manage.py makemigrations
	python manage.py migration
Para no compremer la integridad de la DB, no debemos añadir campos que no pueden ser nulos después de haber creado la tabla, porque los que se hayan añadido
con anterioridad no van a estar rellenos. Para arreglar ese problema debemos añadir otro campo que puede ser, por ejemplo: null=True o añadir un valor por defecto: deafult=""

Los archivos.py que se generan con un número delante sirven para controlar la versión que va subiendo al sistema. Lo hace gracias a que una de las tabla que genera para funcionar es 
migration, donde guarda toda la evolución de la DB. Es muy útil porque podemos hacer un roll back para hacer algún cambio.


3.3. DELEGACIÓN DE RUTAS

Comprobamos el funcionamiento del modelado de datos en nuestra app.
Vemos como comunicamos todas las acciones a nuestro proyecto raíz manteniendo una modularización de nuestra estructura.
Una buena práctica es que cada aplicación contenga sus propias urls y hacer que el proyecto raíz sepa cómo acceder a ellos.

1. Dentro de la app (comentarios) creamos un archivo urls.py
2. Copiamos la estructura de la url.py general (modularizacion) y la dejamos limpia
3. Creamos una ruta de prueba, importamos views y creamos una vista junto con el template, solo un hola mundo para comprobar que el circuito funciona bien
4. Para que nuestro directrio general pueda leer las urls de las app, debemos hacer:
	- Importar la librería include: from django.urls import path, include
	- Crear el path de la carpeta de la app junto con el include:
		path('Comment/', include('commentarios.urls')),

3.4. CREACIÓN Y BORRADO DE DATOS

1. Creamos una ruta y una vista con el nombre create
2. En la vista importamos el modelo Comment que habíamos creado
3. En la vista, dentro de la función, creamos un objeto:
	 comment = Comment(name:'Manuela', score:5, comment: 'Este es un comentario')
4. Lo guardamos en la DB:
	comment.save()

5. Otra manera de crear sin el save, se guarda de manera automática:
	comment = Comment.objects.create(name='Mina')
6. Cuando creamos, para ejecutar la llamada debemos RECARGAR la página

7. Para borrar hacemos un path nuevo y la vista:
	path('delete', views.delete, name='delete'),

8. Para borrar un objeto primero debemos encontrarlo:
	def delete (request):
    		comment = Comment.objects.get(id=1) #Para encontarlo
    		comment.delete() #Para borrarlo

    		return HttpResponse('Ruta para probar los borrados')

9. Otra manera de hacer borrados es con los filters. Directamente, sin instancia:
	Comment.objects.filter(id=4).delete()


3.5. ESTRUCTURA Y CLAVES FORÁNEAS

Creamos un nuevo proyecto:

1. django-admin startproject my_blog

2. Una nueva app dentro del proyecto: 
	python manage.py startapp post

3. Metemos la app dentro del setting-py, en INSTALLED_APP = ['post']

4. Comprobamos que se ha creado de manera correcta:
	python manage.py check post
	System check identified no issues (0 silenced).

5. En la aplicación de post creamos el urls.py

6. Creamos la url para la app post y así delegar las rutas de post a su archivo urls.py
	from django.urls import path, include #Este include hay que escrbirlo
	path('post/', include('post.urls'))

7. Definimos el archivo urls.py de la app post que, de momento, dejamos vacío (hay que crearlo dentro del directorio de la app):
	from django.urls import path

	urlpatterns = [
	]

8. Definimos los modelos creando una clase por cada uno de los modelos:

	1. Clase autor:
		class Author(models.Model):
    			name = models.Charfield(max_length=200)
    			email = models.EmailField()

    			def __str__(self):
        			return self.name

	2. Clase para las entradas en el blog que relacionamos con el autor gracias a la foreing key:
		class Entry (models.Model):
    			author = models.ForeignKey(Author, on_delete=models.CASCADE) #Declaramos la clave foránea y l decimos que, si borramos al autor, se borren también los post para conservar la integridad de los datos
    			headline = models.CharField(max_length=255)
    			body_text = models.TextField()
    			public_date = models.DateTimeField(default = date.today())
    			rating = models.IntegerField(default=5)

    			def __str__(self):
        			return self.headline

	3. Migramos los datos:
		- python manage.py makemigrtions
		- pythin manage.py migrate

	4. Comprobamos que se ha creado la DB


3.6. SEEDING Y PAQUETES

Ahora, poblaremos una base de datos con un factoring que nos permite intrpducir datos falsos de prueba (faking) para poder hacer consultas y ver cómo funciona la app 	

1. Hacemos la carga del paquete de forma externa. En Github podemos ver las intrucciones de instalación de django seed, que son:

	- pip install django-seed #si hubiera problemas en la instalación por colisión con diferentes versiones de Django, podemos poner delante de la instrucció  la pabara "python"
	- En setting.py colocamos la app:
		INSTALLED_APPS = [
    			...
    			'django_seed',
		]
	- Comprobamos que está instalada:
		python manage.py check django_seed

2. Poblamos la DB según las instrucciones del readme de la app en Github:
	-python manage.py seed api --number=15 #Donde api es el nombre de la app y el number el número de registros que queremos introducir
	
   Nos encontramos con un problema, porque no encuentra el módulo 'psycopg2' y miramos en Github la solución  en el apartado issues y hay otra persona con el mismo problema que recomienda esto:
	pip install psycopg2-binary

   Volvemos a ejecutar la instrucción anterior:
	python manage.py seed post --number=50

3.7. CONSULTA DE DATOS I

Vamos a la aplicación Post y trabajamos la vista que va a generar la consulta:

1. Creamos la ruta y la asociamos a a la vista:
	- En el urls.py: path('queries/', views.queries, name="queries")
	- En views.py: 
		1. importamos 'from django.http import HttpResponse' para usar las respuestas HTTP ya que vamos a estar trabajando directamente las consultas, no vamos a renderizarlas en un template
		2. Creamos la función: 
			def queries (request):
    				return HttpResponse("Consulta realizada")

2. Realizamos las consultas:

-Primero entramos en el proyecto (cd my_blog), comprobamos que hemos hecho todas las migraciones (python manage.py migrate) y levantamos el servidor (python manage.py runserver)
- Generamos el template para visualizar los datos:
	1. Creamos la carpeta 'templates' y dentro otra llamada 'post' donde generamos la vista queries.html
	2. En settings.py especificamos los datos:
		  'DIRS': ['templates']
	3. Creamos estructura de html5 y dejamos prepardo para visualizar los datos
- Empezamos a generar las vistas en views:
	1. Importamos los modelos que necesitaremos y quitamos el httpresponse:
		from .models import Author, Entry
	2. Redefinimos la función y comenzamos a hacer consultas:
		
		def queries (request):
    			# Obtener todos los elementos
    			authors = Author.objects.all()

    			# Obtener datos filtrados por condición
    			filtered = Author.objects.filter(email='aprilcontreras@example.org')

    			# Obtener un único objeto (filtrado)
    			author = Author.objects.get(id=1)

    			# Obtener los 10 primeros elementos
    			limits = Author.objects.all()[:10]

    			# Obtener 10 elemetos saltando los 5 primeros
    			offsets = Author.objects.all()[5:10] 
  
    				return render(request, 'post/queries.html', {'authors': authors, 'filtered': filtered, 'author': author, 'limits': limits, 'offsets':  offsets})

	3. Lo pintamos en el HTML para que se muestre el resultado:

	<body>
        <h3>Busqueda limitada y con offset</h3>
        <ul>
            {% for offset in offsets %}
                <li>{{ offset.email }}</li>
            {% endfor %}
        </ul>


        <h3>Obteniendo los 10 primeros (limit)</h3>
            <ul>
                {% for limit in limits %}
                    <li>{{ limit.email }}</li>
                {% endfor %}
            </ul>

        <h3>Obteniendo un único elemento (filtrado por id)</h3>
            <p>{{author}}</p>

        <h3>Buscando autor donde email =  aprilcontreras@example.org</h3>
            <ul>
                {% for elm in filtered %}
                    <li>{{elm.name}} | {{elm.email}}</li>
                {% endfor %}
            </ul>

        <h3>Todos los autores</h3>
            <ul>
                {% for author in authors%}
                    <li>{{author.name}} ( {{author.email}})</li>
                {% endfor %}
            </ul>
        <h3>Total autores: {{ authors|length }}</h3>
        
    </body>

	

		











