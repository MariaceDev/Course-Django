
NUEVO PROYECTO
django-admin startproject holamundo

Crea un archivo manage.py y una carpeta holamundo, que una aplicación que se gestiona como un paquete.
El directorio raíz que se crea como defecto tiene el mismo nombre que el proyecto.

manage.py nos permite gestionar el proyecto, no hay qie tocar, se encarga de poner a nuestgra disposición las instrucciones de consola para poder operar.

En la carpeta está toda la estructura de archivos: todas las aplicaciones (carpetas) tienen:
- un _init_.py, para poder gestionar cada aplicaicón com unnpaquete
- asgi.py y wsgi son archivos auxiliares, que nos van a servir para ayudarnos por ejemplo, con el servidor y otras acciones ausiliares.
- urls.py: asocia las urls con las vistas que los gestionan. Es un array con los path. Aquí escribiremos todas las rutas y las vistas, también  los templates.
- settings.py: para establecer las configuraciones del paquete. Por ejemplo: hay un array con las apps instaladas, gracias a que es un framework vienen ya instaladas

1.5 PRIMER HOLA MUNDO: CIRCUITO COMPLETO

- Creamos una archivo de vistas para controlar la ruta y devolver un mensaje http para poder comprobar el circuito completo de esta arquitectura.
- Entramos en la terminal y creamos la estructura de base de 11:32 03/07/2023datos:para ello migra los modelos de datos a nuestro sistema de permanencia de datos a través del comando "migrator". Lo tendremos que hcer cada vez que modifiquemos la estructura de datos, al inicio y cada vez que trabajemos con él.
- Primero debemos llamar al archivo manage.py para hacer cualquier acción en la terminal y luego le solicitamos el comando ejecutar
- Entonces ejecutamos el comando: python manage.py migrate (tienes que colocarte en la ruta correcta)
- Para ver la db en vs instalamos sql tools y sql viewer
- Para continuar, podemos usar el servidor de django llamando desde el terminal: python manage.py runserver
- Entonces nos levanta un servidor en el puerto 8000, si seguimos el link veremos la página de django
- Para interrumpir el servidor usamos "cntrl c".
- Necesitamos un archivo de vistas, recordamos: las url apuntan a las vistas y estas trabajan con los modelos y estos devuelven los template.
- Entonces creamos un views.py que es donde vamos a declarar las vistas con las que estamos trabajando.
- Las vistas contienen la lógica y solo son diferentes funciones a las que se asociaran las url.
- Creamos la primera vista: 
#las vistas siempre van a tener un parámetro que es el request, la petición de ejecutar esta vista
#En este ejemplo nos saltamos los modelos y las plantillas con las que trabajaremos más adelente

from django.http import HttpResponse

def saludo(request):
    return HttpResponse("Hola mundo")

# Ya tenemos la vista creada, ahora necesitamos asociar una ruta que ejecute la vista. 
# Para ello nos vamos el urls.py y la definimos: path('saludo/', views.saludo, name='saludo') #es muy imprtante terminar con "/"
 Además, tenemos que importar la views: from . import views

- Levantamos de nuevo el servidor y seguimos el link. Aparece de inicio un error y es normal, porque no tenemos ninguna ruta en la raiz del proyecto.
- Las que exiten son admin y saludo. entonces ejecutamos la ruta saludo en la barra del navegador añadiendo: /saludo
- YA TENEMOS NUESTRO PRIMER CIRCUITO

2.1 RUTAS CON PARÁMETROS

Esto nos permitirá recepcionar variables a través de la url que puede posteriormente utilizar en nuestra vista.

- Hasta ahora solo hemos definido rutas estáticas, no reciben ninguan información a través de la url.
- si hacemos un blog, por ejemplo, y queremos recibir el id de la noticia: path("post/3") o una función para pedir la edad path("adulto/edad")
path('adulto/<int:edad>/<int:altura>/'): asi se introducen las variables. después lo asociamos a na vista:  path('adulto/<int:edad>/<int:altura>/' views.adulto, name='adulto')

- Hacemos una prueba:

path('adulto/<int:edad>/', views.adulto, name='adulto')

def adulto (request, edad):
    if(edad >= 18):
        return HttpResponse ("Es mayor de edad.")
    else:
        return HttpResponse ("No eres mayor de edad.")



http://127.0.0.1:8000/adulto/14/
No eres mayor de edad.


2.2 USO DE PLANTILLAS

Qué son las plantillas y configuramos nuestro primer template.

Creamos un nuevo proyecto: django-admin startproject plantillas

1º.- Migramos toda la estructura: python manage.py migrate.
2º.- Levantamos servidor: python manage.py runserver.
3º.- Creamos un views.py 
4ª.- Creamos un path: path('simple', views.simple, name='simple') e importamos el views.py
5º.- Creamos una vista nueva, pero en vez de devolver un http, ddevolvemos un template que muestre la información al usuario

Los template o plantillas es un trozo de texto que aislamos dentro de un archivo, que, de forma habitual será HTML. 
Las plantillas contienen la parte visual de proyecto, la lógica estará en las views.
Carga de un template:
1- Establecer el directorio donde vamos a colocar las plantillas, que será en: settings.py
Ahí hay un array de direcciones para buscar donde se encuentran la plantillas:  'DIRS': ['templates']
2- Creamos en la raíz una carpeta con el mismo nombre.
3- Cremos un archivo para views que se va a llamar simple.html, donde podemos escribir nuestro código html
4- Volvemos al archivo views para terminar el return, que debe devolver la plantilla. Hay diferentes métodos, como haciendo la carga de un archivo.
Pero django nos facilita con atajos a través del método render: from django.shortcuts import render
Después terminamos la vista usando render al que le pasamos tres parámetros: el request o petición, la ruta hacia el html y el contexto, que es un diccionario, se lo pasamos vacío porque esta plantilla no necesita nada para funcionar):

def simple(request):
    return render(request, 'simple.html', {})

2.3. USO DE CONTEXTOS

1.- Hacemos un nuevo path al que llamamos dinámico.
2.- Definimos la vista en views con una función. Para ello hacemos uso de una variable pasada por paramertro. Para en el path solicitamos un string llamado nombre:
 
	path('dinamico/<str:name>/', views.dinamico, name='dinamico')

3.- Creamos un nuevo archivo HTML llamado dinamico, utilizando la plantilla que hemos creado.
4.- Para la vista, utilizamos un return con render al que le pasamos los tres parámetros definidos en el apartado anterior, con la diferencia de que, en vez de pasar un diccionario vacío, le pasamos una variable llamada contexto que contendrá el diccionario.

	def dinamico (request, name):
    	  context = {'name': name}
    	  return render(request, 'dinamico.html', context)

5.- En el contexto lo que hacemos es el uso de un par clave:valor, lo que hacemos es uso de la clave para que pinte el valor. Para ello, en HTML lo que hacemos es una doble llave para colocar el name. Así, colocamos el valor del contexto, hacienod uso de la información contextual:
	
	    <h1>Hola {{name}}</h1>

6.- Podemos pasar todo tipo de datos, incluso objetos y clases con sus métodos. No solo tipo de datos primitivos.
7.- Porbamos a pasar un array:

	def dinamico (request, name):
    	  categories = ['code', 'design', 'marketing']
    	  context = {'name': name, 'categories': categories}
    	  return render(request, 'dinamico.html', context)
         ____________________________________________________

  	<body>
          <h1>Hola {{name}}</h1>
          <h3>Categorías</h3>
          <p>{{categories}}</p>   
    	</body>

Resultado:

Hola Mari Carmen
Categorías
['code', 'design', 'marketing']

Como podemos ver, nos pinta la estructura, pero lo que queremos es simplemente acceder a la imformación de la estructura, para ello tendremos que recorrer la estructura para pintar la info sin corchetes, de forma correcta.


2.4. BUCLES Y CONDICIONALES EN PLANTILLAS

Es importante que no cargemos acciones de lógica en las plantillas (HTML), igualmente no debemos pintar (visualización) en las vistas.

Para recorrer las estructuras, BUCLES, debemos usar una nomenclatura diferente {% %}. La estructura quedaría de la siguiente manera:

   <body>
        <h1>Hola {{name}}</h1>
        <h3>Categorías</h3>
        <ul>
            {% for category in categories %} <!--Hacemos un foreach para recorrer el array-->
                <li>{{category}}</li> <!--Escribimos código con la imformación que usamos, es un literal-->
            {% endfor%} <!--Cerramos el foreach-->
        </ul>  
    </body>

Y el resultado:

Hola Mari Carmen
Categorías
   · code
   · design
   · marketing

También, podemos incorporar CONDICIONALES:

   <body>
        <h1>Hola {{name}}</h1>
        <h3>Categorías</h3>
        <ul>
            {% for category in categories %} <!--Hacemos un foreach para recorrer el array-->
                {% if category == 'code' %} <!--Incorporamos el if con la condición-->
                    <li><b>{{category}}</b></li> <!--Le indicamos que lo pinte en negrita-->
                {% else %} <!--Si no se cumple la condición: -->
                    <li>{{category}}</li> <!--Escribimos código con la imformación que usamos, es un literal-->
                    {% endif %} <!--Cerramos el if-->
            {% endfor %} <!--Cerramos el foreach-->
        </ul>  
    </body>







